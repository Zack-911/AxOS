# .github/workflows/build-iso.yml
name: Build AxOS ISO

on:
  workflow_dispatch:
    inputs:
      profile:
        description: Path to archiso profile dir
        required: true
        default: axos-iso
      label:
        description: ISO volume label (-L)
        required: false
        default: AxOS
      app:
        description: Application name (-A)
        required: false
        default: AxOS
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'

permissions:
  contents: read

jobs:
  build-iso:
    name: Build ISO (Arch container on Ubuntu runner)
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache pacman pkg cache
        uses: actions/cache@v4
        with:
          path: /var/cache/pacman/pkg
          key: pacman-${{ runner.os }}-${{ hashFiles('**/pacman.conf') }}
          restore-keys: pacman-${{ runner.os }}-

      - name: Prepare Arch environment
        shell: bash
        run: |
          set -euxo pipefail
          sed -i 's/^#ParallelDownloads.*/ParallelDownloads = 10/' /etc/pacman.conf
          pacman -Syyu --noconfirm --needed
          pacman -S --noconfirm --needed archlinux-keyring
          pacman-key --init || true
          pacman-key --populate archlinux || true
          # NOTE: add grub + efibootmgr for GRUB-based EFI validation/builds
          pacman -S --noconfirm --needed archiso git base-devel squashfs-tools grub efibootmgr dosfstools mtools


      - name: Build ISO (via build.sh)
        id: build
        shell: bash
        env:
          PROFILE: ${{ github.event.inputs.profile || 'axos-iso' }}
          LABEL:   ${{ github.event.inputs.label  || 'AxOS' }}
          APP:     ${{ github.event.inputs.app    || 'AxOS' }}
        run: |
          set -euxo pipefail
          chmod +x ./build.sh
          outdir="$(pwd)/out"
          workdir="$(pwd)/work"
          ./build.sh -m iso -o "$outdir" -w "$workdir" -L "$LABEL" -A "$APP" "$PROFILE"
          ISO_PATH="$(find "$outdir" -type f -name '*.iso' | head -n1)"
          echo "iso_path=${ISO_PATH}" >> "$GITHUB_OUTPUT"

      - name: Show ISO info
        run: |
          ls -lh "${{ steps.build.outputs.iso_path }}"
          sha256sum "${{ steps.build.outputs.iso_path }}" | tee iso.sha256

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: axos-iso
          path: |
            ${{ steps.build.outputs.iso_path }}
            iso.sha256
          if-no-files-found: error
